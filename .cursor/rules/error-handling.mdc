---
type: auto
description: Comprehensive error handling patterns for VS Code extensions
globs: ["**/*.ts", "**/*.js"]
alwaysApply: false
---

# Error Handling Best Practices

## Error Handling Patterns

- Always wrap async operations in try-catch blocks
- Provide user-friendly error messages using `vscode.window.showErrorMessage()`
- Log detailed errors to the console for debugging
- Use specific error types when possible (e.g., `FileNotFoundError`)
- Implement graceful degradation when operations fail

## VS Code Specific Error Handling

- Handle missing workspace folders gracefully
- Check for file existence before operations
- Validate user input before processing
- Use `vscode.window.showWarningMessage()` for recoverable issues
- Provide actionable error messages with suggested solutions

## Resource Management

- Always dispose of file watchers, event listeners, and subscriptions
- Use `context.subscriptions.push()` for proper cleanup
- Implement proper cancellation for long-running operations
- Handle extension deactivation cleanly
- Avoid memory leaks with proper resource disposal

## User Experience

- Show progress indicators for long operations
- Provide clear feedback for user actions
- Use appropriate message types (info, warning, error)
- Implement undo functionality where possible
- Handle network failures gracefully