---
description: Testing strategies for VS Code extensions
globs: ["**/*.test.ts", "**/*.spec.ts", "package.json"]
alwaysApply: false
---

# VS Code Extension Testing

## Unit Testing

- Test individual functions and classes in isolation
- Mock VS Code API dependencies using `@types/vscode` test utilities
- Use Jest or Mocha for test framework
- Aim for high code coverage on critical paths
- Test error conditions and edge cases

## Integration Testing

- Test command execution end-to-end
- Verify tree provider data loading
- Test file system operations
- Validate extension activation and deactivation
- Test workspace folder changes

## VS Code Extension Testing

- Use `@vscode/test-electron` for extension testing
- Test in different VS Code versions
- Verify extension works in different workspace configurations
- Test with various file types and project structures
- Validate extension marketplace compatibility

## Test Data Management

- Use fixtures for consistent test data
- Create temporary workspaces for testing
- Clean up test artifacts after tests
- Use meaningful test descriptions
- Group related tests logically

## Continuous Integration

- Run tests on multiple Node.js versions
- Test on different operating systems
- Validate package.json and extension manifest
- Check for security vulnerabilities
- Ensure proper TypeScript compilation