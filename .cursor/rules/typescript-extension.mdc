---
type: always
description: TypeScript VS Code extension development best practices
globs: ["**/*.ts", "**/*.js", "package.json", "tsconfig.json"]
alwaysApply: true
---

# TypeScript VS Code Extension Development

## Code Quality Standards

- Use strict TypeScript configuration with `strict: true`
- Prefer `const` over `let`, avoid `var` entirely
- Use explicit return types for public methods
- Implement proper error handling with try-catch blocks
- Use async/await over Promise chains for better readability

## VS Code API Usage

- Always dispose of resources in the `deactivate()` function
- Use `vscode.workspace.fs` for file operations instead of Node.js fs
- Register commands and providers in the `activate()` function
- Use proper activation events in package.json to optimize startup time
- Implement proper tree data providers with refresh capabilities

## Extension Architecture

- Separate concerns: scanners, providers, commands, and utilities
- Use dependency injection where appropriate
- Implement proper file watching for auto-refresh functionality
- Handle workspace folder changes gracefully
- Provide meaningful error messages to users

## Performance Considerations

- Lazy load heavy operations
- Use file system watchers efficiently
- Implement proper caching for expensive operations
- Avoid blocking the main thread with synchronous operations
- Use webpack or similar bundling for production builds